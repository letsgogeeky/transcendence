generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// tournament and matchmaking models

model Tournament {
  id          String    @id @default(uuid())
  name        String
  status      String    // active, inactive, completed
  options     Json      // { winCondition: "score", winScore: 10 } or { winCondition: "time", winTime: 10 }
  createdAt   DateTime  @default(now())
  adminId     String?    // References User from auth schema nullable
  participants TournamentParticipant[]
  matches Match[]
}

model TournamentParticipant {
  id          String    @id @default(uuid())
  tournamentId String    // References Tournament from tournament schema
  userId      String    // References User from auth schema
  status      String    // active, eliminated, winner, pending, rejected, accepted
  createdAt   DateTime  @default(now())
  tournament Tournament? @relation(fields: [tournamentId], references: [id])
}


// a model for the legendary Pong game enabling multiplayer real-time games

model Match {
  id          String    @id @default(uuid())
  userId      String    // References User from auth schema
  gameType    String    // 1v1, 1vAI, 2v2, All vs All
  status      String    // pending, in progress, completed
  tournamentId String?    // References Tournament from tournament schema
  settings    Json?      // { players: 2, aiPlayers: 0, winScore: 10, timeLimit: 10000 }
  stats       Json?      // { score: 10, time: 10000 }
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt  // nullable
  scores      MatchScore[]
  participants MatchParticipant[]
  tournament Tournament? @relation(fields: [tournamentId], references: [id])
}

model MatchParticipant {
  id          String    @id @default(uuid())
  matchId     String    // References Match from match schema
  userId      String    // References User from auth schema
  joinedAt    DateTime  @default(now())
  match       Match     @relation(fields: [matchId], references: [id])
}

model MatchScore {
  id          String    @id @default(uuid())
  matchId     String    // References Match from match schema
  userId      String    // References User from auth schema
  score       Int
  createdAt   DateTime  @default(now())
  match       Match     @relation(fields: [matchId], references: [id])
}

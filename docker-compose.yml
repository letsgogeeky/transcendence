services:
    auth:
        build:
            context: ./backend/auth
            dockerfile: Dockerfile
        image: auth
        ports:
            - '8081:8081'
        networks:
            - app-network
        volumes:
            - ./certs:/app/certs
            - ./uploads:/app/uploads
            - ./db:/app/db
            - ./backend/auth/src:/app/src
        env_file: './.env'
        environment:
            - DATABASE_URL=file:/app/db/auth.db

    match:
        build:
            context: ./backend/match
            dockerfile: Dockerfile
        image: match
        ports:
            - '8082:8082'
        networks:
            - app-network
        volumes:
            - ./db:/app/db
            - ./uploads:/app/uploads
            - ./certs:/app/certs
            - ./backend/match/src:/app/src
            - ./backend/match/dist:/app/dist
        env_file: './.env'
        environment:
            - DATABASE_URL=file:/app/db/match.db
        depends_on:
            - auth

    chat:
        build:
            context: ./backend/chat
            dockerfile: Dockerfile
        image: chat
        ports:
            - '8083:8083'
        networks:
            - app-network
        volumes:
            - ./db:/app/db
            - ./uploads:/app/uploads
            - ./certs:/app/certs
            - ./backend/chat/src:/app/src
        env_file: './.env'
        environment:
            - DATABASE_URL=file:/app/db/chat.db
        depends_on:
            - auth

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        ports:
            - '3000:3000'
        volumes:
            - ./frontend:/app
            - /app/node_modules
            - ./certs:/app/certs
        networks:
            - app-network
        env_file: './.env'
        depends_on:
            - auth
            - match
            - chat
    nginx:
        container_name: nginx
        restart: always
        build:
            context: ./infra/nginx
            dockerfile: nginx.Dockerfile
        networks:
            - app-network
        ports:
            - '80:80'
            - '443:443'
        environment:
            - NGINX_HOST=0.0.0.0
            - NGINX_PORT=80
            - FRONTEND=https://localhost
        volumes:
            - ./infra/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
            - ./certs:/etc/nginx/ssl
        depends_on:
            - auth
            - match
            - chat
            - frontend

    nginx-exporter:
        image: nginx/nginx-prometheus-exporter
        ports:
            - '9113:9113'
        networks:
            - app-network
        command: 
            - '-nginx.scrape-uri=http://nginx/status'
        depends_on:
            - nginx

    node-exporter:
        image: prom/node-exporter
        ports:
            - '9100:9100'
        networks:
            - app-network

    prometheus:
        image: prom/prometheus
        ports:
            - '9090:9090'
        networks:
            - app-network
        volumes:
            - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - ./infra/prometheus/rules:/etc/prometheus/rules
            - ./data/prometheus:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        depends_on:
            - node-exporter
            - nginx-exporter
            - auth
            - match
            - chat

    grafana:
        image: grafana/grafana
        ports:
            - '3001:3000'
        networks:
            - app-network
        volumes:
            - ./infra/grafana/provisioning:/etc/grafana/provisioning
            - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
            - ./data/grafana:/var/lib/grafana
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
            - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
            - GF_USERS_ALLOW_SIGN_UP=false
        depends_on:
            - prometheus

networks:
    app-network:
        driver: bridge

